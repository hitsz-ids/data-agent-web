#user  nobody;
worker_processes  auto;

error_log /var/log/nginx/error.log;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    # access_log  logs/access.log  main;
    log_format main '[$time_local] [Status:$status]  [RealIP:$http_x_forwarded_for] [ForwardIP:$proxy_add_x_forwarded_for] [LocalIP:$remote_addr]'
                    '[$remote_user]  [$request] [RequestTime:$request_time] '
                    '[BodyBytes:$body_bytes_sent] [$http_referer] [$http_user_agent]';


    sendfile        on;
    #tcp_nopush     on;

    gzip  on;
    gzip_min_length 1k; # 不压缩临界值，大于1K的才压缩，一般不用改
    gzip_buffers 4 16k; # buffer，就是，嗯，算了不解释了，不用改
    gzip_http_version 1.1; # 用了反向代理的话，末端通信是HTTP/1.0，有需求的应该也不用看我这科普文了；有这句的话注释了就行了，默认是HTTP/1.1
    gzip_comp_level 2; # 压缩级别，1-10，数字越大压缩的越好，时间也越长！
    # 进行压缩的文件类型，缺啥补啥就行了，JavaScript有两种写法，最好都写上吧，总有人抱怨js文件没有压缩，其实>多写一种格式就行了
    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
    gzip_vary off; # 跟Squid等缓存服务有关，on的话会在Header里增加"Vary: Accept-Encoding"，我不需要这玩意，自己对照情况看着办吧
    gzip_disable "MSIE [1-6]\."; # IE6对Gzip不怎么友好，不给它Gzip了
    
    
    server {
        listen       80;
        server_name  localhost;

        location / {
            root   /usr/share/nginx/html/dist;
            index  index.html index.htm;
            if ($request_filename ~* .*\.(?:htm|html)$) {
               add_header Cache-Control "private, no-store, no-cache, must-revalidate, proxy-revalidate";
            }
            if ($request_filename ~* .*\.(?:js|css)$) {
              expires 7d;
            }
            if ($request_filename ~* .*\.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm)$) {
              expires 7d;
            }
        }

        location ^~/api/ {
           proxy_pass http://localhost:10821;
           client_max_body_size 100000M;
           proxy_buffering off;
           proxy_connect_timeout 1800s;
           proxy_send_timeout 1800s;
           proxy_read_timeout 1800s;
           keepalive_timeout  65;
        }
        
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}